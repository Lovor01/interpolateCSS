"use strict";function interpolateCSS(e){function n(){window.requestAnimationFrame(function(){function n(e,n,t){e instanceof NodeList?e.forEach(function(e){t(e,n)}):t(e,n)}function o(e,t,o){function i(n,i){n.style[i]=(e.yValues_calc[t+1]-e.yValues_calc[t])/(e.xBreakpoints[t+1]-e.xBreakpoints[t])*(o-e.xBreakpoints[t])+e.yValues_calc[t]+e.unit}n(e.element,e.property,i),l=!0}function i(e){let n=parseFloat(e);return[n,e.substring(n.toString().length)]}let l;e.forEach(function(e){let r,s;if(r=window.innerWidth,e.hasOwnProperty("xDefinition")?(s=i(window.getComputedStyle(e.xDefinition.element)[e.xDefinition.property]),e.singleY?e.yValues_calc=e.yValues*s[0]:e.yValues_calc=e.yValues.map(function(e){return e*s[0]}),e.hasOwnProperty("unit")||(e.unit=s[1])):e.yValues_calc=e.yValues,e.hasOwnProperty("xBreakpoints")){const t=e.xBreakpoints.length-1;l=!1;for(let n=0;n<t;n++)if(r>=e.xBreakpoints[n]&&r<=e.xBreakpoints[n+1]||e.extrapolateMin&&0==n&&r<e.xBreakpoints[n]){o(e,n,void 0!==s?s[0]:r);break}e.extrapolateMax&&r>e.xBreakpoints[t]&&o(e,t-1,r),l||n(e.element,e.property,function(e,n){e.style[n]=""})}else n(e.element,e.property,function(n,t){n.style[t]=e.yValues_calc+e.unit});window.dispatchEvent(t)})})}const t=new Event("interpolateCSSDone");if(e.forEach(function(e,t){function o(){console.warn("Provided element number "+t+" is not DOM element, interpolation will not work on element! \nElement: "+e.element)}if(e.singleY="number"==typeof e.yValues,"string"==typeof e.element){let n=document.querySelectorAll(e.element);n.forEach(function(e){e instanceof Element||(o(),e=void 0)});const t=n.length;0===t?(o(),e.element=void 0):e.element=1===t?n[0]:n}else e.element&&e.element instanceof Element||(o(),e.element=void 0);e&&e.xDefinition&&("self"===e.xDefinition.element&&(e.xDefinition.element=e.element instanceof NodeList?e.element[0]:e.element),!e.xDefinition.element instanceof Element&&(console.warn("Provided xDefinition element in element number "+t+" is not DOM element, interpolation will not work on element! \nElement: "+e.element),e.element=void 0)),e.singleY&&e.xBreakpoints&&(e.yValues=e.xBreakpoints.map(function(){return e.yValues}));const i=new ResizeObserver(n);e.element instanceof NodeList?e.element.forEach(function(e){i.observe(e)}):i.observe(e.element)}),e=e.filter(function(e){return Boolean(e.element)}),0!==e.length){if(window.addEventListener("resize",n),e.doMutations){const e=new MutationObserver(n);e.observe(document.querySelector("body"))}n()}}